import * as readline from 'readline';import * as os from 'os';import manifest from '../manifest.json' assert { type: 'json' };const rl = readline.createInterface({  input: process.stdin,  output: process.stdout,  terminal: false});// MCP Handshakeconst handshake = {  mcp_version: '0.1',  pid: process.pid,  manifest: manifest};process.stdout.write(JSON.stringify(handshake) + '\n');rl.on('line', (line) => {  try {    const request = JSON.parse(line);    handleRequest(request);  } catch (e) {    sendError('Invalid JSON');  }});function handleRequest(request) {  const { tool_name, parameters } = request;  if (tool_name === 'example_tool') {    const result = parameters.query.toUpperCase();    sendResponse(request.request_id, result);  } else if (tool_name === 'system_info') {    const result = {      os: os.platform(),      arch: os.arch(),      cpus: os.cpus().length    };    sendResponse(request.request_id, result);  } else {    sendError(`Tool not found: ${tool_name}`, request.request_id);  }}function sendResponse(requestId, payload) {  const response = {    request_id: requestId,    payload: payload  };  process.stdout.write(JSON.stringify(response) + '\n');}function sendError(message, requestId) {  const errorResponse = {    request_id: requestId,    error: message  };  process.stdout.write(JSON.stringify(errorResponse) + '\n');}